{"version":3,"sources":["components/MainMenu.js","components/QuestionCount.js","components/InQuizHeader.js","components/Question.js","components/AnswerOption.js","components/Timer.js","components/Quiz.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["MainMenu","state","playername","numQuestions","timerSelected","timer","storedTimer","handleChange","bind","handleCheckChange","startQuiz","renderTimerOption","this","setState","props","totalquestions","timerselected","event","target","name","value","prevState","tmp","startquiz","className","defaultValue","onChange","type","placeholder","min","max","checked","onClick","Component","QuestionCount","curQuestionNum","InQuizHeader","Question","curquestion","AnswerOption","playeranswer","curoption","answer","updateanswer","disabled","questioninprogress","Timer","curtime","Quiz","curToken","curQuestion","curOptions","curAnswer","curScore","qAnswer","playerAnswer","questionInProgress","curTimer","getNewQuestion","renderQuestion","randomizeArray","checkAnswer","renderAnswerOptions","updatePlayerAnswer","renderSubmitButton","renderNextQButton","nextQuestionOrResults","timerCountDown","renderTimer","startTimer","submitAnswer","clearInterval","console","log","self","token","axios","get","then","response","settoken","data","catch","error","time","getQuestion","a","async","results","incorrect_answers","optionsArray","push","correct_answer","replace","i","length","ans","newArr","question","array","j","Math","floor","random","setInterval","tmpTime","viewresults","answercomponents","map","option","key","submitOrResultsBtn","Results","score","playquizagain","returntomainmenu","App","playerName","previousQuestions","curQuestionID","totalQuestions","count","sessionToken","firstGame","mainMenu","pageNum","renderMainMenu","renderQuiz","renderResults","renderSwitch","viewResults","playQuizAgain","renderSpecificPage","setAPIToken","pname","numQ","apiToken","gameScore","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0664eeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass MainMenu extends Component {\r\n    constructor() {\r\n      super();\r\n  \r\n      this.state = {\r\n        playername: \"\",\r\n        numQuestions: 5,\r\n        timerSelected: false,\r\n        timer: null,\r\n        storedTimer: null\r\n      };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleCheckChange = this.handleCheckChange.bind(this);\r\n      this.startQuiz = this.startQuiz.bind(this);\r\n      this.renderTimerOption = this.renderTimerOption.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        playername: this.props.playername,\r\n        numQuestions: this.props.totalquestions,\r\n        timerSelected: this.props.timerselected,\r\n        timer: this.props.timer,\r\n        storedTimer: this.props.timer,\r\n      })\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.setState({\r\n        [event.target.name]: event.target.value\r\n      });\r\n    }\r\n  \r\n    handleCheckChange() {\r\n      if (!this.state.timerSelected) {\r\n        let tmp = (this.state.storedTimer == null) \r\n          ? \"30\" : this.state.storedTimer\r\n        this.setState((prevState, props) => ({\r\n          timerSelected: !prevState.timerSelected,\r\n          timer: tmp\r\n        }));\r\n      } else {\r\n        this.setState((prevState, props) => ({\r\n          timerSelected: !prevState.timerSelected,\r\n          timer: null,\r\n          storedTimer: prevState.timer,\r\n        }));\r\n      }\r\n    }\r\n\r\n    startQuiz() {\r\n        this.props.startquiz(this.state.playername,\r\n            this.state.numQuestions, this.state.timer, this.state.timerSelected)\r\n    }\r\n\r\n    renderTimerOption() {\r\n      return (\r\n          <div className={this.state.timerSelected ?\r\n          \"timer-options-yes\" : \"timer-options-no\"} >\r\n            <label>\r\n              Seconds:\r\n              <select \r\n              className=\"mm-timer-options\"\r\n              name=\"timer\"\r\n              defaultValue={this.props.timerselected ? this.props.timer : \"30\"}\r\n              onChange={this.handleChange}\r\n              >\r\n                <option value=\"15\">15</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"45\">45</option>\r\n                <option value=\"60\">60</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n      )\r\n    }\r\n  \r\n    render() {\r\n  \r\n      return (\r\n        <div className=\"main-menu\">\r\n          <div className=\"jumbotron-main-menu\">\r\n          <h1>Welcome to the quiz app!</h1>\r\n          <p className=\"jumbotron-p\">\r\n            This is a simple quiz app that takes it's questions from\r\n             an online question database that was made available for free use!\r\n          </p>\r\n          </div>\r\n          <div className=\"main-menu-form\">\r\n            <form>\r\n              <label>\r\n                Enter Player Name:\r\n                <input\r\n                className=\"mm-pname-tb\"\r\n                  name=\"playername\"\r\n                  type=\"text\"\r\n                  defaultValue={this.state.playername}\r\n                  onChange={this.handleChange}\r\n                  placeholder=\"Enter Player Name\"\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Enter number of questions you would like:\r\n                <input\r\n                className=\"mm-numq-number\"\r\n                  name=\"numQuestions\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"20\"\r\n                  defaultValue={this.props.totalquestions}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label className=\"timer-checkbox\">   \r\n                Enable Timer:\r\n                <input\r\n                className=\"mm-timer-checkbox\"\r\n                  name=\"timerSelected\"\r\n                  type=\"checkbox\"\r\n                  checked={this.state.timerSelected}\r\n                  onChange={this.handleCheckChange}\r\n                />\r\n              </label>\r\n              {this.renderTimerOption()}\r\n              <br />\r\n              <label>\r\n                <button\r\n                  name=\"startquiz\"\r\n                  className=\"start-quiz-btn\"\r\n                  type=\"button\"\r\n                  onClick={this.startQuiz}\r\n                >\r\n                    Start Quiz\r\n                </button>\r\n              </label>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default MainMenu;\r\n","import React, { Component } from 'react';\r\n\r\nfunction QuestionCount(props) {\r\n\r\n    return (\r\n        <div className=\"questioncount\">\r\n            Question # <span>{ props.curQuestionNum }\r\n            </span> of <span>{ props.totalquestions }</span>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default QuestionCount;","import React, { Component } from 'react';\r\nimport QuestionCount from \"./QuestionCount\"\r\n\r\nfunction InQuizHeader(props) {\r\n\r\n    return (\r\n        <div className=\"inquizheader\">\r\n            <h1> Player: { props.playername } </h1>\r\n            <QuestionCount curQuestionNum={props.curQuestionNum}\r\n            totalquestions={props.totalquestions}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default InQuizHeader;","import React, { Component } from 'react';\r\n\r\nfunction Question(props) {\r\n\r\n    return (\r\n        <div className=\"question\">\r\n            { props.curquestion }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Question;","import React, { Component } from 'react';\r\n\r\nfunction AnswerOption(props) {\r\n\r\n    return (\r\n        <div className=\"answer-option\">\r\n            <button\r\n                type=\"button\"\r\n                className={ (props.playeranswer === props.curoption) ?\r\n                    (props.answer === null) ?\r\n                        'selected-option' :\r\n                            (props.answer === props.curoption) ?\r\n                                'selected-correct' : 'selected-incorrect'\r\n                    : 'option-button'\r\n                }\r\n                onClick={() => props.updateanswer(props.curoption)}\r\n                disabled={!props.questioninprogress}\r\n            >\r\n                { props.curoption }\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default AnswerOption;","import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"timer\">\r\n                {this.props.curtime}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Timer","import React, { Component } from 'react';\r\nimport axios from \"axios\"\r\nimport InQuizHeader from \"./InQuizHeader\"\r\nimport Question from \"./Question\"\r\nimport AnswerOption from \"./AnswerOption\"\r\nimport Timer from \"./Timer\"\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            curToken:\"\",\r\n            curQuestion: \"\",\r\n            curOptions: [],\r\n            curAnswer: null,\r\n            curScore: 0,\r\n            qAnswer: \"\",\r\n            playerAnswer: \"\",\r\n            curQuestionNum: 1,\r\n            questionInProgress: false,\r\n            curTimer: null,\r\n        }\r\n\r\n        this.getNewQuestion = this.getNewQuestion.bind(this);\r\n        this.renderQuestion = this.renderQuestion.bind(this);\r\n        this.randomizeArray = this.randomizeArray.bind(this);\r\n        this.checkAnswer = this.checkAnswer.bind(this);\r\n        this.renderAnswerOptions = this.renderAnswerOptions.bind(this);\r\n        this.updatePlayerAnswer = this.updatePlayerAnswer.bind(this);\r\n        this.renderSubmitButton = this.renderSubmitButton.bind(this);\r\n        this.renderNextQButton = this.renderNextQButton.bind(this);\r\n        this.nextQuestionOrResults = this.nextQuestionOrResults.bind(this);\r\n        this.timerCountDown = this.timerCountDown.bind(this);\r\n        this.renderTimer = this.renderTimer.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.submitAnswer = this.submitAnswer.bind(this);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.timerselected) {\r\n            clearInterval(this.timer)\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"Quiz did mount\")\r\n        var self = this;\r\n        if (this.props.token === \"\") {\r\n            const getTokenURL = \"https://opentdb.com/api_token.php?command=request\";\r\n            await axios.get(getTokenURL)\r\n            .then(function (response) {\r\n                self.props.settoken(response.data.token);\r\n                self.setState({\r\n                    curToken: response.data.token\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        } else {\r\n            this.setState({\r\n                curToken: this.props.token\r\n            })\r\n        }\r\n        this.getNewQuestion()\r\n        this.setState({\r\n            questionInProgress: true,\r\n            curTimer: this.props.time,\r\n        }, () => {if (this.props.timerselected) {\r\n            this.startTimer()\r\n        }})\r\n    }\r\n\r\n    async getNewQuestion() {\r\n        var self = this;\r\n        var getQuestion = \"https://opentdb.com/api.php?amount=1\"\r\n        getQuestion += \"&token=\" + this.state.curToken\r\n        await axios.get(getQuestion)\r\n        .then(async function (response) {\r\n            let optionsArray = await response.data.results[0].incorrect_answers\r\n            optionsArray.push(response.data.results[0].correct_answer.replace(/&#039;/g, \"'\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\"))\r\n            var i;\r\n            for (i = 0; i < optionsArray.length - 1; i++) {\r\n                optionsArray[i] = optionsArray[i].replace(/&#039;/g, \"'\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\");\r\n            }\r\n            let ans = optionsArray[optionsArray.length - 1]\r\n            let newArr = await self.randomizeArray(optionsArray)\r\n            let curquestion = response.data.results[0].question.replace(/&#039;/g, \"'\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\")\r\n            console.log(\"Question\")\r\n            self.setState((prevState, props) => ({\r\n                qAnswer: ans,\r\n                curQuestion: curquestion,\r\n                curOptions: newArr,\r\n            }));\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    randomizeArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array\r\n    }\r\n\r\n    checkAnswer() {\r\n        if (this.state.qAnswer == this.state.playerAnswer) {\r\n            this.setState((prevState) => ({\r\n                curScore: prevState.curScore + 1\r\n            }))\r\n        }\r\n    }\r\n\r\n    startTimer() {\r\n        this.timer = setInterval(this.timerCountDown, 1000)\r\n    }\r\n\r\n    timerCountDown() {\r\n        let tmpTime = this.state.curTimer\r\n        if (tmpTime > 0 && \r\n            this.state.questionInProgress !== false) {\r\n                this.setState({curTimer: tmpTime - 1})\r\n        } else {\r\n            clearInterval(this.timer)\r\n            this.setState({questionInProgress: false})\r\n        }\r\n    }\r\n\r\n    renderQuestion() {\r\n        return (\r\n            <Question\r\n            curquestion={ this.state.curQuestion }\r\n            />\r\n        )\r\n    }\r\n\r\n    updatePlayerAnswer(answer) {\r\n        this.setState({\r\n            playerAnswer: answer\r\n        })\r\n    }\r\n\r\n    submitAnswer(event) {\r\n        this.setState({questionInProgress: false})\r\n        this.checkAnswer()\r\n        if (this.props.timerselected) {\r\n            clearInterval(this.timer)\r\n        }\r\n    }\r\n\r\n    async nextQuestionOrResults(event) {\r\n        if (this.state.curQuestionNum < this.props.totalquestions) {\r\n            this.setState((prevState, props) => ({\r\n                playerAnswer: \"\",\r\n                questionInProgress: true,\r\n                curQuestionNum: prevState.curQuestionNum + 1,\r\n            }))\r\n            await this.getNewQuestion()\r\n            if (this.props.timerselected) {\r\n                this.setState({\r\n                    curTimer: this.props.time,\r\n                }, this.startTimer()\r\n                )\r\n            }\r\n        } else {\r\n            this.props.viewresults(this.state.curScore)\r\n        }\r\n    }\r\n\r\n    renderSubmitButton() {\r\n        return (\r\n            \r\n                <button\r\n                type=\"button\"\r\n                className=\"submit-answer-btn\"\r\n                onClick={this.submitAnswer}\r\n                disabled={!this.state.questionInProgress\r\n                    || this.state.playerAnswer === \"\"}\r\n                >\r\n                Submit\r\n                </button>\r\n            \r\n        )\r\n    }\r\n\r\n    renderNextQButton() {\r\n        return (\r\n            \r\n                <button\r\n                type=\"button\"\r\n                className={(this.props.totalquestions === this.state.curQuestionNum)\r\n                    ? \"view-results-btn\" : \"next-question-btn\"\r\n                }\r\n                onClick={this.nextQuestionOrResults}\r\n                disabled={this.state.curQuestionNum == 0 || this.state.questionInProgress}\r\n                >\r\n                    {(this.props.totalquestions != this.state.curQuestionNum)\r\n                    ? \"Next\" : \"View Results\"\r\n                    }\r\n                </button>\r\n            \r\n        )\r\n    }\r\n\r\n    renderTimer() {\r\n        return (\r\n            this.props.timerselected ? \r\n            <Timer \r\n            curtime={this.state.curTimer}\r\n            />\r\n            : null\r\n        )\r\n    }\r\n\r\n    renderAnswerOptions() {\r\n        const answercomponents = this.state.curOptions.map((option) =>\r\n            <AnswerOption\r\n            key={option}\r\n            curoption={option}\r\n            playeranswer={this.state.playerAnswer}\r\n            updateanswer={this.updatePlayerAnswer}\r\n            answer={this.state.curAnswer}\r\n            questioninprogress={this.state.questionInProgress}\r\n            />\r\n\r\n        )\r\n        return (\r\n            <div className=\"answer-options\">\r\n                { answercomponents }\r\n            </div>\r\n        )      \r\n    }\r\n\r\n    render() {\r\n\r\n        const submitOrResultsBtn = (this.state.questionInProgress)\r\n            ? this.renderSubmitButton() : this.renderNextQButton()\r\n\r\n        return(\r\n            <div className=\"quiz\" >\r\n\r\n                <InQuizHeader playername={this.props.playername}\r\n                curQuestionNum={this.state.curQuestionNum}\r\n                totalquestions={this.props.totalquestions}\r\n                />\r\n\r\n                { this.renderQuestion() }\r\n\r\n                { this.renderTimer() }\r\n\r\n                <div>\r\n                    { this.renderAnswerOptions() }\r\n                </div>\r\n                <div className=\"quiz-submit-results-btn\">\r\n                    { submitOrResultsBtn }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Quiz;","import React from \"react\"\r\n\r\nfunction Results(props) {\r\n\r\n    return (\r\n        <div className=\"results\">\r\n            <div className=\"results-text\">\r\n                <h1>Congratulations {props.playername}!</h1>\r\n                <p>Your score was:</p>\r\n                <p>{props.score} / {props.totalquestions}</p>\r\n            </div>\r\n            <div className=\"results-btns\">\r\n                <button\r\n                className=\"play-again-btn\"\r\n                onClick={props.playquizagain}\r\n                >\r\n                    Play Again!\r\n                </button>\r\n                <button\r\n                className=\"return-to-main-menu-btn\"\r\n                onClick={() => props.returntomainmenu(1)}\r\n                >\r\n                    Return to Main Menu\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport './App.css';\nimport MainMenu from \"./components/MainMenu\"\nimport Quiz from \"./components/Quiz\"\nimport Results from \"./components//Results\"\n\nclass App extends Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      playerName:\"\",\n      previousQuestions: [],\n      curQuestion: \"\",\n      curQuestionID: \"\",\n      curOptions: [],\n      curAnswer: \"\",\n      totalQuestions: 5,\n      count: 0,\n      score: 0,\n      sessionToken: \"\",\n      firstGame: true,\n      mainMenu: true,\n      timerSelected: false,\n      timer: null,\n      pageNum: 1,\n\n    }\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.renderMainMenu = this.renderMainMenu.bind(this);\n    this.renderQuiz = this.renderQuiz.bind(this);\n    this.renderResults = this.renderResults.bind(this);\n    this.renderSwitch = this.renderSwitch.bind(this);\n    this.viewResults = this.viewResults.bind(this);\n    this.playQuizAgain = this.playQuizAgain.bind(this);\n    this.renderSpecificPage = this.renderSpecificPage.bind(this);\n    this.setAPIToken = this.setAPIToken.bind(this);\n\n  }\n\n  startQuiz(pname, numQ, time, timerselected) {\n    if (timerselected) {\n      this.setState({\n        timer: time\n      });\n    } else {\n      this.setState({\n        timer: null\n      });\n    }\n    this.setState({\n      timerSelected: timerselected,\n      playerName:pname,\n      score: 0,\n      totalQuestions: numQ,\n      pageNum: 2,\n    });\n  }\n\n  setAPIToken(apiToken) {\n    this.setState({\n      sessionToken: apiToken\n    })  \n  }\n\n  playQuizAgain() {\n    this.setState({\n      pageNum: 2,\n    });\n  }\n\n  viewResults(gameScore) {\n    this.setState({\n      score: gameScore,\n      pageNum: 3,\n    });\n\n  }\n\n  renderSpecificPage(pageNumber) {\n    this.setState({\n      pageNum: pageNumber,\n    });\n  }\n\n  renderMainMenu() {\n    return (\n      <MainMenu startquiz={this.startQuiz}\n      playername={this.state.playerName}\n      totalquestions={this.state.totalQuestions}\n      timer={this.state.timer}\n      timerselected={this.state.timerSelected}\n      />\n    )\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz playername={this.state.playerName}\n      time={this.state.timer}\n      timerselected={this.state.timerSelected}\n      totalquestions={this.state.totalQuestions}\n      viewresults={this.viewResults}\n      token={this.state.sessionToken}\n      settoken={this.setAPIToken}\n      />\n    )\n  }\n\n  renderResults() {\n      return (\n        <Results \n        score={this.state.score}\n        playername={this.state.playerName}\n        totalquestions={this.state.totalQuestions}\n        playquizagain={this.playQuizAgain}\n        returntomainmenu={this.renderSpecificPage}\n        />\n      )\n  }\n\n  renderSwitch() {\n    switch(this.state.pageNum) {\n      case 1:\n        return this.renderMainMenu()\n      \n      case 2:\n        return this.renderQuiz()\n\n      case 3:\n        return this.renderResults()\n    }\n  }\n\n  render() {\n\n    const screen = this.state.mainMenu ?\n      this.renderMainMenu() : this.renderQuiz()\n    \n\n\n    return (\n      <div className=\"test1\">\n      <div className=\"App\">\n        { this.renderSwitch() }\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}